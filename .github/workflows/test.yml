name: Flutter Testing

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    name: Flutter Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.5'
        channel: 'stable'
        cache: true

    - name: Install dependencies
      run: flutter pub get

    - name: Generate code
      run: dart run build_runner build --delete-conflicting-outputs

    - name: Setup environment variables
      run: |
        echo "FLUTTER_TEST=true" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV
        echo "ENABLE_PAYFAST=false" >> $GITHUB_ENV
        echo "USE_MOCK_PAYMENT=true" >> $GITHUB_ENV
        echo "USE_MOCK_NOTIFICATIONS=true" >> $GITHUB_ENV
        echo "DEBUG_MODE=true" >> $GITHUB_ENV

    - name: Create test directories
      run: |
        mkdir -p coverage
        mkdir -p test_reports

    - name: Run unit tests with coverage
      run: |
        flutter test --coverage test/unit/
        echo "Unit tests completed"

    - name: Run integration tests with coverage
      run: |
        flutter test --coverage test/integration/
        echo "Integration tests completed"

    - name: Run widget tests with coverage
      run: |
        flutter test --coverage test/widget/
        echo "Widget tests completed"

    - name: Generate coverage report
      run: |
        # Combine coverage files
        lcov --add-tracefile coverage/lcov.info \
             --add-tracefile coverage/lcov2.info \
             --add-tracefile coverage/lcov3.info \
             --output-file coverage/lcov_combined.info

        # Generate HTML coverage report
        genhtml coverage/lcov_combined.info --output-directory coverage/html

        # Generate coverage summary
        lcov --summary coverage/lcov_combined.info

    - name: Check coverage threshold
      run: |
        COVERAGE=$(lcov --summary coverage/lcov_combined.info | grep -o 'lines......: [0-9.]*%' | grep -o '[0-9.]*' | head -1)
        echo "Current coverage: $COVERAGE%"

        THRESHOLD=80
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "❌ Coverage ($COVERAGE%) is below threshold ($THRESHOLD%)"
          exit 1
        else
          echo "✅ Coverage ($COVERAGE%) meets threshold ($THRESHOLD%)"
        fi

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          coverage/
          test_reports/
        retention-days: 30

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        files: coverage/lcov_combined.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Run static analysis
      run: |
        flutter analyze --fatal-infos --fatal-warnings

    - name: Check code formatting
      run: |
        dart format --set-exit-if-changed lib/ test/

    - name: Build APK (verification)
      run: |
        flutter build apk --debug
        echo "APK build successful"

    - name: Generate test report
      run: |
        dart run test/run_tests.dart --coverage --ci

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.5'
        channel: 'stable'
        cache: true

    - name: Install dependencies
      run: flutter pub get

    - name: Generate code
      run: dart run build_runner build --delete-conflicting-outputs

    - name: Run performance tests
      run: |
        flutter test --performance test/performance/

    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-reports
        path: test/performance/reports/
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[security-scan]')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.5'
        channel: 'stable'
        cache: true

    - name: Install dependencies
      run: flutter pub get

    - name: Run security scan
      run: |
        # Scan for potential security issues
        flutter analyze --fatal-infos

        # Check for sensitive data in code
        grep -r -i "password\|secret\|key\|token" lib/ --exclude-dir=*.g.dart || true

        # Check for hardcoded URLs
        grep -r "http://" lib/ --exclude-dir=*.g.dart || true
        grep -r "https://.*supabase\|https://.*payfast" lib/ --exclude-dir=*.g.dart || true

  integration-test-on-device:
    name: Integration Tests on Device
    runs-on: macos-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[device-test]')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.5'
        channel: 'stable'
        cache: true

    - name: Install dependencies
      run: flutter pub get

    - name: Generate code
      run: dart run build_runner build --delete-conflicting-outputs

    - name: Setup iOS Simulator
      run: |
        xcrun simctl create "iPhone 15" "iPhone 15" "com.apple.CoreSimulator.SimDeviceType.iPhone-15" || true
        xcrun simctl boot "iPhone 15" || true

    - name: Run integration tests on simulator
      run: |
        flutter test -d "iPhone 15" test/integration/

    - name: Upload device test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: device-test-reports
        path: test_reports/
        retention-days: 7

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test]
    if: always()

    steps:
    - name: Notify on success
      if: needs.test.result == 'success'
      run: |
        echo "✅ All tests passed successfully!"

    - name: Notify on failure
      if: needs.test.result == 'failure'
      run: |
        echo "❌ Tests failed! Please check the logs."