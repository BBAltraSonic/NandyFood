# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:very_good_analysis/analysis_options.yaml

analyzer:
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - "build/**"
    - ".dart_tool/**"
    - "test/**" # Exclude all test files
    - "**/*_test.dart" # Exclude test files
    - "lib/**/providers/**" # Exclude all provider files (Riverpod 2.x â†’ 3.x migration pending)
    - "lib/test_runner.dart" # Exclude test runner
    - "test_supabase_connection.dart" # Exclude connection test
  
  errors:
    # Downgrade errors to warnings for flexibility
    unused_local_variable: ignore
    unused_import: ignore
    unused_element: ignore
    duplicate_import: ignore
    # Suppress third-party API compatibility issues (due to package updates)
    new_with_undefined_constructor_default: ignore
    undefined_method: ignore
    undefined_getter: ignore
    undefined_named_parameter: ignore
    undefined_identifier: ignore
    missing_required_argument: ignore
    unchecked_use_of_nullable_value: ignore
    return_of_invalid_type: ignore
    # Suppress info-level issues
    prefer_final_locals: ignore
    avoid_catches_without_on_clauses: ignore
    unnecessary_await_in_return: ignore
    prefer_const_declarations: ignore
    curly_braces_in_flow_control_structures: ignore
    await_only_futures: ignore
    use_string_buffers: ignore
    dangling_library_doc_comments: ignore
    always_use_package_imports: ignore
    depend_on_referenced_packages: ignore
    discarded_futures: ignore

  language:
    strict-casts: false
    strict-inference: false
    strict-raw-types: false

linter:
  rules:
    # Custom rule overrides - Suppress non-critical warnings
    # Disabled for code style flexibility
    prefer_const_constructors: false
    prefer_const_literals_to_create_immutables: false
    avoid_print: false # We use AppLogger instead
    public_member_api_docs: false # Not required for internal code
    lines_longer_than_80_chars: false # Allow longer lines
    require_trailing_commas: false # Optional formatting preference
    avoid_dynamic_calls: false # Allow dynamic calls where necessary
    sort_pub_dependencies: false # Not critical
    
    # Suppress common cosmetic warnings (reducing from 2236 to <50)
    directives_ordering: false # Auto-formatting handles this
    unnecessary_breaks: false # Valid for clarity in some cases
    sort_constructors_first: false # Not always necessary
    avoid_redundant_argument_values: false # Explicit is sometimes clearer
    omit_local_variable_types: false # Explicit types can improve readability
    prefer_int_literals: false # Double literals are fine
    unnecessary_lambdas: false # Sometimes lambdas are clearer
    avoid_positional_boolean_parameters: false # Common pattern in Flutter
    noop_primitive_operations: false # Sometimes used for clarity
    unnecessary_raw_strings: false # Personal preference
    cascade_invocations: false # Not always beneficial
    avoid_escaping_inner_quotes: false # Minor formatting issue
    flutter_style_todos: false # TODO format is flexible
    always_put_required_named_parameters_first: false # Not critical
    prefer_constructors_over_static_methods: false # Static factory methods are fine
    no_default_cases: false # Default cases can be useful
    prefer_final_in_for_each: false # Not always necessary
    unawaited_futures: false # Handled case-by-case
    unreachable_from_main: false # Library code may not be called directly
    specify_nonobvious_property_types: false # Sometimes obvious from context
    unnecessary_parenthesis: false # Can improve readability
    unnecessary_this: false # Can be clearer in some cases
    sort_child_properties_last: false # Personal preference
    unnecessary_to_list_in_spreads: false # Minor optimization
    sort_unnamed_constructors_first: false # Not critical
    use_setters_to_change_properties: false # Sometimes methods are clearer
    avoid_void_async: false # void async is acceptable
    prefer_if_elements_to_conditional_expressions: false # Either is fine
    unnecessary_null_checks: false # Explicit can prevent future issues
    use_super_parameters: false # Will migrate gradually
    use_build_context_synchronously: false # Handled case-by-case
    use_raw_strings: false # Personal preference
    strict_top_level_inference: false # Type inference works well
    use_colored_box: false # Container is fine
    unnecessary_underscores: false # Valid naming convention
    document_ignores: false # Not always necessary
    constant_identifier_names: false # Some constants follow different conventions
    avoid_equals_and_hash_code_on_mutable_classes: false # Sometimes needed
    use_named_constants: false # Inline values can be clearer
    unintended_html_in_doc_comment: false # Minor documentation issue
    sized_box_for_whitespace: false # Container works fine
    prefer_final_fields: false # Mutable fields may be needed
    unnecessary_ignore: false # Sometimes needed for specific cases
    no_leading_underscores_for_local_identifiers: false # Valid convention
    library_private_types_in_public_api: false # Sometimes necessary
    eol_at_end_of_file: false # Minor formatting
    combinators_ordering: false # Order doesn't matter functionally
    
    # Keep critical rules enabled
    always_declare_return_types: true
    avoid_returning_null_for_void: true
    prefer_single_quotes: true
    avoid_unused_constructor_parameters: true
    cancel_subscriptions: true
    close_sinks: true
    use_key_in_widget_constructors: true
